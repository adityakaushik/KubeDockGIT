***USEFUL COMMAND***
docker container kill $(docker ps -q)  (Kill all container)
docker rm $(docker ps --filter status=exited -q) (Remove all container)
docker system prune -a (Delete all images and volumes)


** Check free space in VM **
sudo free –h

**Kernel Version **
uname -r
hostnamectl

**Switch to root **
sudo su -
Or dzdo su -


***Remove Exiting Docker ***
sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine docker-ce
sudo rm -rf /var/lib/docker

**Update package manager **
sudo yum clean all
sudo yum update -y
sudo yum install -y yum-utils

**set up the stable repository **
*for Rhel sudo yum-config-manager --add-repo=https://download.docker.com/linux/rhel/docker-ce.repo
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
cd /etc/yum.repos.d
ls -l

** Install docker **
Guide for reference : https://docs.docker.com/engine/install/centos/
sudo yum install docker-ce docker-ce-cli containerd.io --nobest –y
docker --version

**Check if docker process is active **
ps –ef|grep docker
sudo systemctl start docker
sudo systemctl enable docker
sudo systemctl status docker

***Create working dir ***
mkdir dockerlearning

** Pull sample Image **
docker pull httpd

docker image ls

**Run Container **
docker run –itd <<IMAGE ID>>

docker ps

***Stop Container **
docker stop <<container id>>

*** to check server up inside VM**
docker inspect <Container id>
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <Container id>
curl 172.17.0.2:80
ifconfig

**Start new container ****
docker run –itd –p <<image id>>

docker run –itd –p 9090:80 <<image id>>

docker run -itd --name dev -p 9080:80 <<image id>>

**Mode to start container***
-i  -  interactive
-t  - terminal
-d  - detached 

cat /etc/redhat-release

docker pull centos
docker images
docker run –it <<image id>>

cat /etc/redhat-release
docker run –itd –p 9090:80 <<httpd server image id>>
docker exec –it <<Container_ID>> /bin/bash


***COPY****
Create a html file on host (sample.html)
<html><body><h1>SAMPLE file</h1></body></html>

docker cp sample.html <<container id>>:/usr/local/apache2/htdocs

Check for new html page for the above container
docker exec –it <<container id>> /bin/bash

**** Volume*****
docker volume create v1
docker volume list 
docker volume inspect [volume_name]  
docker run –itd -v v1=/usr/local/apache2/htdocs -P httpd
docker volume rm [volume_name]  

docker run –itd -v /root/dockerlearning:/usr/local/apache2/htdocs -P httpd


*****Network******
docker network ls
docker network inspect bridge
docker network create --driver bridge isolated_nw
docker network inspect isolated_nw
docker run -itd --network=isolated_nw -p 9080:80 httpd:latest


****Network ***
Create Dockerfile
vi Dockerfile

FROM busybox
MAINTAINER Yogendra
ENTRYPOINT ["/bin/cat"]
CMD ["/etc/passwd"]


docker images
docker build -t myhttp:v1 .
docker images
docker run -itd -P <image id >

****Docker Hub***
create account in https://hub.docker.com/
create new repository after login
docker login
cat /root/.docker/config.json

docker build –t <username>/<repositoryname> .
docker push <username>/<repository>:v1

****Install Docker Compose****
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

docker-compose --version

docker-compose up –d

docker-compose down 














